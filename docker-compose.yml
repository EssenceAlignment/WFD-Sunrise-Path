version: '3.8'

services:
  # Recovery Compass Funding Dashboard
  funding-dashboard:
    build:
      context: ./scripts
      dockerfile: Dockerfile.dashboard
    container_name: rc-funding-dashboard
    ports:
      - "4321:4321"
    environment:
      - NODE_ENV=production
      - AIRTABLE_API_KEY=${AIRTABLE_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4321/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./data:/app/data
      - ./logs/dashboard:/app/logs
    networks:
      - recovery-network

  # Pattern Insight Engine
  pattern-engine:
    build:
      context: ./scripts
      dockerfile: Dockerfile.pattern
    container_name: rc-pattern-engine
    environment:
      - AIRTABLE_API_KEY=${AIRTABLE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    restart: always
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./patterns:/app/patterns
      - ./logs/pattern-engine:/app/logs
    networks:
      - recovery-network

  # Agent Coordinator
  agent-coordinator:
    build:
      context: ./cline-ai-orchestration
      dockerfile: Dockerfile
    container_name: rc-agent-coordinator
    depends_on:
      pattern-engine:
        condition: service_healthy
    environment:
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - PATTERN_ENGINE_URL=http://pattern-engine:8080
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./agents:/app/agents
      - ./logs/coordinator:/app/logs
    networks:
      - recovery-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: rc-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - funding-dashboard
      - pattern-engine
      - agent-coordinator
    restart: always
    networks:
      - recovery-network

  # Redis for caching and session management
  redis:
    image: redis:alpine
    container_name: rc-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - recovery-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: rc-prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    restart: always
    networks:
      - recovery-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: rc-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    restart: always
    depends_on:
      - prometheus
    networks:
      - recovery-network

networks:
  recovery-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
