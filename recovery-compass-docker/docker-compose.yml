version: "3.9"

services:
  # Database layer - starts first
  postgres:
    image: postgres:15-alpine
    container_name: recovery-compass-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-recovery_compass}
      POSTGRES_USER: ${POSTGRES_USER:-recovery_compass}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - core-net
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-recovery_compass}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Cache layer
  redis:
    image: redis:7-alpine
    container_name: recovery-compass-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis-data:/data
    networks:
      - core-net
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Funding discovery engine
  funding-engine:
    build:
      context: ./services/funding-engine
      dockerfile: Dockerfile
    container_name: recovery-compass-funding-engine
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
      - .env.secrets
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-recovery_compass}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-recovery_compass}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
    volumes:
      - funding-data:/data
      - ../scripts:/app/scripts:ro
    networks:
      - core-net
      - external-apis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ERD platform
  erd-platform:
    build:
      context: ./services/erd-platform
      dockerfile: Dockerfile
    container_name: recovery-compass-erd-platform
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
      - .env.secrets
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://${POSTGRES_USER:-recovery_compass}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-recovery_compass}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      API_BASE: http://erd-platform:3000
    volumes:
      - erd-data:/app/data
    networks:
      - core-net
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Metrics collection
  metrics-relay:
    build:
      context: ./services/metrics-relay
      dockerfile: Dockerfile
    container_name: recovery-compass-metrics-relay
    depends_on:
      - redis
      - postgres
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-recovery_compass}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-recovery_compass}
      METRICS_CONFIG_PATH: /app/config/metrics.yml
    volumes:
      - metrics-data:/metrics
      - ../metrics.yml:/app/config/metrics.yml:ro
    networks:
      - core-net
      - monitoring
    expose:
      - "9090"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/metrics/health"]
      interval: 20s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Partner portal
  partner-portal:
    build:
      context: ./services/partner-portal
      dockerfile: Dockerfile
    container_name: recovery-compass-partner-portal
    depends_on:
      - erd-platform
      - metrics-relay
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3000}
      REACT_APP_METRICS_URL: ${REACT_APP_METRICS_URL:-http://localhost:9090}
    networks:
      - core-net
      - partner-access
    ports:
      - "8080:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Pattern discovery engine
  pattern-engine:
    build:
      context: ./services/pattern-engine
      dockerfile: Dockerfile
    container_name: recovery-compass-pattern-engine
    depends_on:
      - metrics-relay
    volumes:
      - ../scripts/pattern_collector.py:/app/pattern_collector.py:ro
      - pattern-data:/app/patterns
    networks:
      - core-net
    restart: unless-stopped

networks:
  core-net:
    driver: bridge
    name: recovery-compass-core
  external-apis:
    driver: bridge
    name: recovery-compass-external
  partner-access:
    driver: bridge
    name: recovery-compass-partner
  monitoring:
    driver: bridge
    name: recovery-compass-monitoring

volumes:
  postgres-data:
    name: recovery-compass-postgres-data
  redis-data:
    name: recovery-compass-redis-data
  funding-data:
    name: recovery-compass-funding-data
  erd-data:
    name: recovery-compass-erd-data
  metrics-data:
    name: recovery-compass-metrics-data
  pattern-data:
    name: recovery-compass-pattern-data
