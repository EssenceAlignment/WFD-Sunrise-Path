name: Docker Compose CI

on:
  push:
    branches: [ main ]
    paths:
      - 'recovery-compass-docker/**'
      - '.github/workflows/docker-compose-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'recovery-compass-docker/**'
      - '.github/workflows/docker-compose-ci.yml'

jobs:
  docker-compose-test:
    name: Test Docker Compose Stack
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create minimal env files
      run: |
        cd recovery-compass-docker
        cp .env.secrets.example .env.secrets
        # Use GitHub secrets for real values
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD || 'test_password' }}" >> .env.secrets
        echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD || 'test_redis' }}" >> .env.secrets

    - name: Test minimal stack startup
      run: |
        cd recovery-compass-docker
        docker compose -f docker-compose.minimal.yml up -d
        sleep 10
        docker compose -f docker-compose.minimal.yml ps
        docker compose -f docker-compose.minimal.yml logs

    - name: Verify services are healthy
      run: |
        cd recovery-compass-docker
        # Check PostgreSQL
        docker compose -f docker-compose.minimal.yml exec -T postgres pg_isready -U recovery_compass
        # Check Redis (with password)
        docker compose -f docker-compose.minimal.yml exec -T redis redis-cli -a test_redis ping

    - name: Run health checks
      run: |
        cd recovery-compass-docker
        # Verify containers are still running
        docker compose -f docker-compose.minimal.yml ps --format json | jq -e '.[].State == "running"'

    - name: Clean up
      if: always()
      run: |
        cd recovery-compass-docker
        docker compose -f docker-compose.minimal.yml down -v

  kompose-validation:
    name: Validate Kubernetes Migration Path
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Kompose
      run: |
        curl -L https://github.com/kubernetes/kompose/releases/download/v1.31.2/kompose-linux-amd64 -o kompose
        chmod +x kompose
        sudo mv ./kompose /usr/local/bin/kompose

    - name: Convert docker-compose to Kubernetes
      run: |
        cd recovery-compass-docker
        mkdir -p k8s-manifests
        # Convert the minimal stack first
        kompose convert -f docker-compose.minimal.yml -o k8s-manifests/

    - name: List generated Kubernetes manifests
      run: |
        cd recovery-compass-docker
        echo "=== Generated Kubernetes Manifests ==="
        ls -la k8s-manifests/
        echo ""
        echo "=== Manifest Contents ==="
        for file in k8s-manifests/*.yaml; do
          echo "--- $file ---"
          cat "$file"
          echo ""
        done

    - name: Upload Kubernetes manifests
      uses: actions/upload-artifact@v4
      with:
        name: kubernetes-manifests
        path: recovery-compass-docker/k8s-manifests/
        retention-days: 7

    - name: Validate manifest syntax
      run: |
        cd recovery-compass-docker
        for file in k8s-manifests/*.yaml; do
          echo "Validating $file..."
          # Basic YAML validation
          python3 -c "import yaml; yaml.safe_load(open('$file'))"
        done

  monitoring-stack-test:
    name: Test Monitoring Stack with Profiles
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Network diagnostics
      run: |
        echo "=== Testing Docker Hub connectivity ==="
        # Test with small Alpine image first
        docker pull alpine:3.20

        # Check Docker Hub status
        curl -I https://hub.docker.com

        echo "=== Network information ==="
        curl -s https://ipinfo.io/json | jq .

    - name: Create monitoring env files
      run: |
        cd recovery-compass-docker
        echo "test_grafana_password" > .env.secrets.grafana
        echo "test_pgadmin_password" > .env.secrets.pgadmin
        echo "DB_PASSWORD=test_password" > .env

    - name: Test metrics-only stack (without Loki)
      run: |
        cd recovery-compass-docker
        # Start only metrics services (no logging profile)
        COMPOSE_PROFILES=metrics docker compose -f docker-compose.monitoring.yml up -d --wait prometheus grafana node-exporter

        # Wait for services to stabilize
        sleep 20

        # Check service status
        docker compose -f docker-compose.monitoring.yml ps

        # Verify Prometheus is healthy
        curl -f http://localhost:9090/-/healthy || (docker compose -f docker-compose.monitoring.yml logs prometheus && exit 1)

        # Verify Grafana is accessible
        curl -f http://localhost:3001/api/health || (docker compose -f docker-compose.monitoring.yml logs grafana && exit 1)

    - name: Diagnostic Loki pull test
      id: loki_pull_test
      continue-on-error: true
      run: |
        echo "=== Testing Loki 2.9.0 pull ==="
        time docker pull grafana/loki:2.9.0 || echo "LOKI_PULL_FAILED=true" >> $GITHUB_OUTPUT

    - name: Test with logging profile (if Loki pull succeeded)
      if: steps.loki_pull_test.outputs.LOKI_PULL_FAILED != 'true'
      run: |
        cd recovery-compass-docker
        # Add logging profile
        COMPOSE_PROFILES=logging,metrics docker compose -f docker-compose.monitoring.yml up -d --wait loki promtail

        # Wait for services
        sleep 15

        # Check all services
        docker compose -f docker-compose.monitoring.yml ps

        # Verify Loki is healthy
        curl -f http://localhost:3100/ready || (docker compose -f docker-compose.monitoring.yml logs loki && exit 1)

    - name: Clean up
      if: always()
      run: |
        cd recovery-compass-docker
        COMPOSE_PROFILES=logging,metrics docker compose -f docker-compose.monitoring.yml down -v
        rm -f .env.secrets.grafana .env.secrets.pgadmin .env
