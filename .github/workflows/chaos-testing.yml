name: Chaos Testing - Self-Healing Validation

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      target_service:
        description: 'Specific service to target (leave empty for random)'
        required: false
        type: string

jobs:
  chaos-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services
        run: |
          docker-compose up -d
          sleep 30  # Wait for services to be healthy

      - name: Verify services are running
        run: |
          docker-compose ps
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

      - name: Run chaos test
        id: chaos
        run: |
          if [ -n "${{ inputs.target_service }}" ]; then
            export TARGET_SERVICE="${{ inputs.target_service }}"
          fi
          ./scripts/kill-random-service.sh | tee chaos-results.txt

          # Extract metrics
          RECOVERY_TIME=$(grep "Recovery Time:" chaos-results.txt | awk '{print $3}')
          echo "recovery_time=$RECOVERY_TIME" >> $GITHUB_OUTPUT

      - name: Upload chaos test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: chaos-test-results-${{ github.run_id }}
          path: chaos-results.txt

      - name: Send metrics to monitoring
        if: always()
        run: |
          # Send to Prometheus Pushgateway if configured
          if [ -n "${{ secrets.PUSHGATEWAY_URL }}" ]; then
            cat <<EOF | curl --data-binary @- "${{ secrets.PUSHGATEWAY_URL }}/metrics/job/chaos_test"
          # TYPE chaos_recovery_time_seconds gauge
          chaos_recovery_time_seconds{service="$TARGET",status="success"} ${{ steps.chaos.outputs.recovery_time }}
          # TYPE chaos_test_timestamp gauge
          chaos_test_timestamp $(date +%s)
          EOF
          fi

      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš¨ Chaos Test Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `## Chaos Test Failure

              The nightly chaos test failed to validate self-healing capabilities.

              **Run ID**: ${context.runId}
              **Workflow**: ${context.workflow}

              [View logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})

              ### Action Required
              - Review service logs
              - Check Docker Compose health checks
              - Verify service manager is running
              - Update recovery mechanisms if needed`,
              labels: ['bug', 'infrastructure', 'critical']
            });

  generate-report:
    needs: chaos-test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Generate monthly metrics
        run: |
          # This would aggregate data from previous runs
          # For now, create a simple report
          cat > chaos-metrics-report.md <<EOF
          # Chaos Testing Metrics Report

          Generated: $(date -u +"%Y-%m-%dT%H:%M:%SZ")

          ## Last 30 Days Summary

          - Total chaos tests run: ${{ github.run_number }}
          - Success rate: TBD (requires metrics aggregation)
          - Average recovery time: TBD
          - P95 recovery time: TBD

          ## Recommendations

          - Continue monitoring recovery times
          - Adjust health check intervals based on data
          - Consider expanding chaos scenarios
          EOF

      - name: Upload metrics report
        uses: actions/upload-artifact@v4
        with:
          name: chaos-metrics-report
          path: chaos-metrics-report.md
