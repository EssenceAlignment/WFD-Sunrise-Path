name: Platform Profile & Policy Slice

on:
  workflow_call:
    inputs:
      compose-file:
        description: 'Path to docker-compose file'
        required: false
        default: './recovery-compass-docker/docker-compose.platform-slice.yml'
        type: string
      enable-kompose:
        description: 'Enable Kompose validation'
        required: false
        default: true
        type: boolean
      enable-trivy:
        description: 'Enable Trivy security scanning'
        required: false
        default: true
        type: boolean
      registry-mirror:
        description: 'Registry mirror URL'
        required: false
        default: 'ghcr.io/${{ github.repository_owner }}'
        type: string
    secrets:
      POSTGRES_PASSWORD:
        required: true
      REDIS_PASSWORD:
        required: true
      GRAFANA_ADMIN_PASSWORD:
        required: false

jobs:
  platform-validation:
    name: Platform Validation & Policy Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ===== STEP 1: Secret Scanning =====
      - name: Secret Scanning with TruffleHog
        uses: trufflesecurity/trufflehog@v3.63.7
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      # ===== STEP 2: Prepare Secrets =====
      - name: Create secrets directory
        run: |
          mkdir -p recovery-compass-docker/secrets
          echo "${{ secrets.POSTGRES_PASSWORD }}" > recovery-compass-docker/secrets/postgres_password.txt
          echo "${{ secrets.REDIS_PASSWORD }}" > recovery-compass-docker/secrets/redis_password.txt
          echo "${{ secrets.GRAFANA_ADMIN_PASSWORD || 'admin' }}" > recovery-compass-docker/secrets/grafana_admin_password.txt
          echo '{}' > recovery-compass-docker/secrets/api_keys.json
          chmod 600 recovery-compass-docker/secrets/*.txt recovery-compass-docker/secrets/*.json

      # ===== STEP 3: Docker Compose Validation =====
      - name: Validate Docker Compose syntax
        run: |
          cd recovery-compass-docker
          docker compose -f docker-compose.platform-slice.yml config > /dev/null
          echo "✅ Docker Compose syntax is valid"

      # ===== STEP 4: Pull images from registry mirror =====
      - name: Pull images with registry mirror
        env:
          REGISTRY_MIRROR: ${{ inputs.registry-mirror }}
        run: |
          cd recovery-compass-docker
          # First, try to pull cached versions
          docker compose -f docker-compose.platform-slice.yml pull --quiet || true

          # Build images that don't exist in cache
          docker compose -f docker-compose.platform-slice.yml build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --pull

      # ===== STEP 5: Kompose Validation =====
      - name: Install and run Kompose validation
        if: inputs.enable-kompose
        run: |
          # Install Kompose
          curl -L https://github.com/kubernetes/kompose/releases/download/v1.31.2/kompose-linux-amd64 -o kompose
          chmod +x kompose
          sudo mv ./kompose /usr/local/bin/kompose

          # Validate conversion
          cd recovery-compass-docker
          echo "🔍 Testing Kompose conversion..."

          # Test core services only (no profiles)
          if kompose convert -f docker-compose.platform-slice.yml --stdout > /dev/null 2>&1; then
            echo "✅ Core services can be converted to Kubernetes"
          else
            echo "❌ Kompose conversion failed for core services"
            kompose convert -f docker-compose.platform-slice.yml --stdout || true
            exit 1
          fi

          # Test with profiles
          for profile in metrics logging extras full; do
            echo "🔍 Testing profile: $profile"
            if COMPOSE_PROFILES=$profile kompose convert -f docker-compose.platform-slice.yml --stdout > /dev/null 2>&1; then
              echo "✅ Profile '$profile' can be converted"
            else
              echo "⚠️  Profile '$profile' has conversion warnings (non-blocking)"
            fi
          done

      # ===== STEP 6: Health Check Validation =====
      - name: Start services with health checks
        env:
          REGISTRY_MIRROR: ${{ inputs.registry-mirror }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        run: |
          cd recovery-compass-docker

          # Start core services only
          echo "🚀 Starting core services..."
          docker compose -f docker-compose.platform-slice.yml up -d

          # Wait for health checks
          echo "⏳ Waiting for services to be healthy..."
          timeout 300s bash -c 'until docker compose -f docker-compose.platform-slice.yml ps --format json | jq -e ".[].Health == \"healthy\" or .[].Health == null" > /dev/null; do sleep 5; done'

          # Check status
          docker compose -f docker-compose.platform-slice.yml ps

          # Verify all services are healthy
          unhealthy=$(docker compose -f docker-compose.platform-slice.yml ps --format json | jq -r '.[] | select(.Health == "unhealthy") | .Service' | wc -l)
          if [ "$unhealthy" -gt 0 ]; then
            echo "❌ Some services are unhealthy"
            docker compose -f docker-compose.platform-slice.yml logs
            exit 1
          fi

          echo "✅ All core services are healthy"

      # ===== STEP 7: Test optional profiles =====
      - name: Test optional service profiles
        env:
          REGISTRY_MIRROR: ${{ inputs.registry-mirror }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        run: |
          cd recovery-compass-docker

          # Test metrics profile
          echo "🔍 Testing metrics profile..."
          COMPOSE_PROFILES=metrics docker compose -f docker-compose.platform-slice.yml up -d
          sleep 30

          # Check if core services are still healthy even if metrics fail
          core_healthy=$(docker compose -f docker-compose.platform-slice.yml ps --services | grep -E "postgres|redis|funding-engine|erd-platform" | wc -l)
          if [ "$core_healthy" -eq 4 ]; then
            echo "✅ Core services remain healthy with metrics profile"
          else
            echo "❌ Core services affected by metrics profile"
            docker compose -f docker-compose.platform-slice.yml logs
            exit 1
          fi

          # Cleanup
          docker compose -f docker-compose.platform-slice.yml --profile metrics down

      # ===== STEP 8: Trivy Security Scanning =====
      - name: Run Trivy security scan
        if: inputs.enable-trivy
        uses: aquasecurity/trivy-action@0.16.1
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail the build, just report

      - name: Upload Trivy results to GitHub Security
        if: inputs.enable-trivy
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      # ===== STEP 9: Cleanup =====
      - name: Cleanup
        if: always()
        run: |
          cd recovery-compass-docker
          docker compose -f docker-compose.platform-slice.yml down -v
          rm -rf secrets/

      # ===== STEP 10: Push images to registry =====
      - name: Push images to registry mirror
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          REGISTRY_MIRROR: ${{ inputs.registry-mirror }}
        run: |
          cd recovery-compass-docker

          # Tag and push all built images
          for service in funding-engine erd-platform metrics-relay partner-portal pattern-engine; do
            if docker image inspect recovery-compass-$service:latest > /dev/null 2>&1; then
              docker tag recovery-compass-$service:latest $REGISTRY_MIRROR/$service:latest
              docker tag recovery-compass-$service:latest $REGISTRY_MIRROR/$service:${{ github.sha }}
              docker push $REGISTRY_MIRROR/$service:latest
              docker push $REGISTRY_MIRROR/$service:${{ github.sha }}
              echo "✅ Pushed $service to registry"
            fi
          done

  # ===== Dependency scanning job =====
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Dependabot-like scan with Snyk
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output=snyk.sarif
        continue-on-error: true

      - name: Upload Snyk results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

      - name: Check for critical vulnerabilities
        run: |
          if [ -f snyk.sarif ]; then
            critical_count=$(jq '.runs[0].results | map(select(.level == "error")) | length' snyk.sarif)
            if [ "$critical_count" -gt 0 ]; then
              echo "❌ Found $critical_count critical vulnerabilities"
              exit 1
            fi
          fi
          echo "✅ No critical vulnerabilities found"
