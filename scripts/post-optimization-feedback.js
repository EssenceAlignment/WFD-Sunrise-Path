const { Octokit } = require("@octokit/rest");
const PROptimizationBot = require("./pr-optimization-bot");

async function postOptimizationFeedback(prNumber) {
  const octokit = new Octokit({
    auth: process.env.GITHUB_TOKEN || process.env.GH_TOKEN,
  });

  const bot = new PROptimizationBot();
  const report = await bot.generateOptimizationReport(prNumber);

  const feedback = `## üöÄ Automated PR Optimization Analysis

### PR Health Score: ${report.automationScore}%

### Summary
- üìä **Commits**: ${report.summary.commits}
- ‚ûï **Additions**: ${report.summary.additions.toLocaleString()}
- ‚ûñ **Deletions**: ${report.summary.deletions.toLocaleString()}
- üìÅ **Files Changed**: ${report.summary.changedFiles}

### Issues Detected
${report.issues.length === 0 ? '‚úÖ No issues detected!' : report.issues.map(issue =>
  `- **${issue.severity.toUpperCase()}**: ${issue.message}\n  - üí° ${issue.recommendation}`
).join('\n')}

### Automated Actions
1. ‚úÖ Triggered Korbit AI description regeneration
2. ${report.automationScore < 70 ? '‚úÖ Initiating automatic PR split...' : '‚è≠Ô∏è PR size is manageable, skipping split'}
3. ${report.issues.some(i => i.type === 'potential_secret') ? 'üîí Security scan initiated' : '‚úÖ No security issues detected'}

### Recommendations
${report.recommendations.map(rec =>
  `- **${rec.priority.toUpperCase()}**: ${rec.action}\n  - Reason: ${rec.reason}`
).join('\n')}

### Next Steps
${report.automationScore < 70 ?
`This PR will be automatically split into smaller, reviewable chunks. Watch for new PRs with the \`auto-split\` label.` :
`This PR is ready for review. Consider enabling auto-merge once all checks pass.`}

---
*Generated by Recovery Compass Force Multiplication System at ${new Date().toISOString()}*
*Automation Score: ${report.automationScore}% | Run \`npm run pr:optimize ${prNumber}\` for manual control*`;

  await octokit.issues.createComment({
    owner: process.env.GITHUB_REPOSITORY_OWNER || 'Recovery-Compass',
    repo: process.env.GITHUB_REPOSITORY?.split('/')[1] || 'wfd-sunrise-path',
    issue_number: prNumber,
    body: feedback
  });

  // If score is low, trigger the split
  if (report.automationScore < 70) {
    console.log('Triggering automatic PR split...');
    const splitPRs = await bot.autoSplitPR(prNumber);

    if (splitPRs.length > 0) {
      const splitComment = `## üéØ PR Successfully Split!

Created ${splitPRs.length} targeted PRs:
${splitPRs.map(pr => `- #${pr.number}: ${pr.type} (${pr.commits} commits)`).join('\n')}

Please review and merge these PRs in order.`;

      await octokit.issues.createComment({
        owner: process.env.GITHUB_REPOSITORY_OWNER || 'Recovery-Compass',
        repo: process.env.GITHUB_REPOSITORY?.split('/')[1] || 'wfd-sunrise-path',
        issue_number: prNumber,
        body: splitComment
      });
    }
  }
}

// Run if called directly
if (require.main === module) {
  const prNumber = parseInt(process.argv[2]);
  if (!prNumber) {
    console.error('Usage: node post-optimization-feedback.js <pr-number>');
    process.exit(1);
  }

  postOptimizationFeedback(prNumber)
    .then(() => console.log('‚úÖ Optimization feedback posted'))
    .catch(err => {
      console.error('‚ùå Error:', err.message);
      process.exit(1);
    });
}

module.exports = { postOptimizationFeedback };
