/**
 * Prometheus Exporter for mcp-dashboard
 * Auto-generated by CIA Registry
 */

import express from 'express';
import { register, Counter, Histogram, Gauge } from 'prom-client';

// Component metadata
const COMPONENT_ID = 'mcp-dashboard';
const METRICS_PORT = 9101;
const NAMESPACE = 'mcp_dashboard';

// Default metrics
const httpRequestsTotal = new Counter({
  name: `${NAMESPACE}_http_requests_total`,
  help: 'Total number of HTTP requests',
  labelNames: ['method', 'path', 'status']
});

const requestDuration = new Histogram({
  name: `${NAMESPACE}_http_request_duration_seconds`,
  help: 'HTTP request latency',
  labelNames: ['method', 'path'],
  buckets: [0.1, 0.5, 1, 2.5, 5, 10]
});

const activeConnections = new Gauge({
  name: `${NAMESPACE}_active_connections`,
  help: 'Number of active connections'
});

const componentInfo = new Gauge({
  name: `${NAMESPACE}_info`,
  help: 'Component information',
  labelNames: ['version', 'status', 'domain']
});

// Set component info
componentInfo.set({
  version: '0.1.0',
  status: 'development',
  domain: 'mcp'
}, 1);

// Express server for metrics endpoint
const app = express();

app.get('/metrics', async (req, res) => {
  res.set('Content-Type', register.contentType);
  res.end(await register.metrics());
});

app.get('/healthz', (req, res) => {
  res.json({
    status: 'healthy',
    component: COMPONENT_ID,
    uptime: process.uptime()
  });
});

// Start server
app.listen(METRICS_PORT, () => {
  console.log(`ðŸš€ Prometheus exporter for ${COMPONENT_ID} running on port ${METRICS_PORT}`);
  console.log(`ðŸ“Š Metrics available at http://localhost:${METRICS_PORT}/metrics`);
});

// Export metrics for use in application
export {
  httpRequestsTotal,
  requestDuration,
  activeConnections,
  componentInfo
};
